"use strict";(self.webpackChunkkinderheim=self.webpackChunkkinderheim||[]).push([[4368],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7350:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={},l="Definitions",c={unversionedId:"code/definitions",id:"code/definitions",title:"Definitions",description:"",source:"@site/docs/code/definitions.md",sourceDirName:"code",slug:"/code/definitions",permalink:"/kinderheim/code/definitions",draft:!1,editUrl:"https://github.com/ecioran/kinderheim/docs/code/definitions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Config",permalink:"/kinderheim/code/config"},next:{title:"Compilers",permalink:"/kinderheim/compilers/"}},u={},d=[],p={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"definitions"},"Definitions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# $PATH\n\n# Add to beginning of $PATH\nPATH=~/opt/bin:$PATH\n\n# Add to end of $PATH\nPATH=$PATH:~/opt/bin\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Standard input & output\n\n# Send output of command to a file instead of terminal\n# Shell will create a file if it does not exist, if it does, the shell erases (clobbers) the original file first\ncommand > file\n\n# Append to file\ncommand >> file\n\n# Match every line that I type after that has 'this' in it and put the results in to hello_grep.txt file\ngrep this > hello_grep.txt\n\n# Put all the lines matching 'line' into grep_output.txt file\ngrep line hello.txt > grep_output.txt\n\n# >> Redirect output to append to FILE\ngrep line hello.txt >> grep_output.txt\n\n# Redirect standard error stream to FILE\n# where 2> means redirect output stream 2 to write results to the\n# file and not to the terminal\nfind / -name 'story.txt' 2> error_log.txt\n\n# 1> specifies stream ID 1 (standard output) (default)\n# 2> specifies stream ID 2 (standard error)\n\n# Sends both standard error and output to some location\nls /fffff > f 2>&1\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-md"},"- Accept - Specifies the file format the requester wants.\n- Accept-Language - Specifies the human-readable language, like English, Spanish, or Russian.\n- Cache-Control - Specifies whether the response can be generated from a cache.\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Globbing\n\n# Shell can match simple patterns to file and directory names\n# this process is known as globbing\n\n# Simplest of these is the glob character * which tells the shell to match any number of arbitrary characters\n\n# Print a list of files in current directory\necho *\n\n# Shell matches arguments containing globs to filenames\n# substititutes the filenames for those arguments, and then runs the revised command line\n# the substitution is called expansion because the shell substitutes all matching filenames\n\n\nat* # Expands to all filenames that start with at\n\n*at # Expands to all filenames that end with at\n\n*at* # Expands to all filenames that contain at\n\n\n# Another shell glob character is (?) - it instructs the shell to match exactly one arbitrary character\n\n# Match both boat and brat\nb?at\n\n# If you don't want the shell to expand a glob in a command, enclose the glob in single quotes ('')\n\n# It is important to remember that the shell performs expansions before running commands\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-md"},'ASCII code\n\n- ASCII is an encoding representing each typed letter by a number\n- each number is stored in one byte (so the number is in 0..255)\n  - A is 65\n  - B is 66\n  - space is 32\n- "Unicode" is an encoding for mandarin, greek, arabic, etc. languages\n  - typically 2-bytes per "letter"\n\n![](https://i.imgur.com/qbFb4Ik.png)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-md"},"HTTP status codes\n\n- 200-299 are good\n- 300-399 understood (located elsewhere)\n- 400-499 error (404 = resource no longer exists)\n- 400-599 server end (500 = some error on the server)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-md"},"HTTP REST methods\n\n- GET - Used for fetching either a collection of resources or a single resource.\n- POST - Used to add a new resource to a collection.\n  - For example, we wouldn't POST to /players/567 or /games/1234 because they aren't collections.\n  - We would, however, POST to /players or /games to create a new player or a new game.\n- PUT - Use when we want to update a record. We wouldn't use PUT on collection or list URLs.\n- DELETE - Used for sending a DELETE request to a detail record, a URL for a single record, should delete just that record.\n  - Sending DELETE to an entire collection would delete the whole collection but that's usually not implemented, with good reason.\n")))}m.isMDXComponent=!0}}]);