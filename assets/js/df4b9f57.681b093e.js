"use strict";(self.webpackChunkkinderheim=self.webpackChunkkinderheim||[]).push([[4415],{3905:function(e,t,a){a.d(t,{Zo:function(){return h},kt:function(){return s}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var m=r.createContext({}),p=function(e){var t=r.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},h=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,m=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),c=p(a),s=n,f=c["".concat(m,".").concat(s)]||c[s]||u[s]||i;return a?r.createElement(f,o(o({ref:t},h),{},{components:a})):r.createElement(f,o({ref:t},h))}));function s(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},27020:function(e,t,a){a.r(t),a.d(t,{assets:function(){return h},contentTitle:function(){return m},default:function(){return s},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=a(87462),n=a(63366),i=(a(67294),a(3905)),o=["components"],l={title:"Lean"},m="[Lean](https://leanprover.github.io/)",p={unversionedId:"math/logic/automated-theorem-proving/lean",id:"math/logic/automated-theorem-proving/lean",title:"Lean",description:"Open source theorem prover and programming language being developed at Microsoft Research.",source:"@site/docs/math/logic/automated-theorem-proving/lean.md",sourceDirName:"math/logic/automated-theorem-proving",slug:"/math/logic/automated-theorem-proving/lean",permalink:"/kinderheim/math/logic/automated-theorem-proving/lean",draft:!1,editUrl:"https://github.com/ecioran/kinderheim/docs/math/logic/automated-theorem-proving/lean.md",tags:[],version:"current",frontMatter:{title:"Lean"},sidebar:"tutorialSidebar",previous:{title:"Automated theorem proving",permalink:"/kinderheim/math/logic/automated-theorem-proving/"},next:{title:"Satisfiability modulo theories",permalink:"/kinderheim/math/logic/satisfiability-modulo-theories"}},h={},u=[{value:"Links",id:"links",level:2}],c={toc:u};function s(e){var t=e.components,a=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lean"},(0,i.kt)("a",{parentName:"h1",href:"https://leanprover.github.io/"},"Lean")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Open source theorem prover and programming language being developed at Microsoft Research.")),(0,i.kt)("h2",{id:"links"},"Links"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leanprover.github.io/theorem_proving_in_lean4/title_page.html"},"Theorem Proving in Lean 4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leanprover.github.io/theorem_proving_in_lean/"},"Theorem Proving in Lean")," (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/tomhoule/theorem-proving-in-lean-exercises"},"Solutions"),") (",(0,i.kt)("a",{parentName:"li",href:"https://leanprover.github.io/theorem_proving_in_lean/theorem_proving_in_lean.pdf"},"PDF"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/kbuzzard/xena"},"Xena")," - Lean Library currently studying for a degree at Imperial College."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://wwwf.imperial.ac.uk/~buzzard/xena/"},"Xena Project")," - Building a library of undergraduate level pure maths."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover-community/mathlib"},"Lean mathlib")," - Lean mathematical components library."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leanprover-community.github.io/papers/mathlib-paper.pdf"},"The Lean mathematical library paper")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover-community/lean-perfectoid-spaces"},"lean-perfectoid-spaces")," - Perfectoid spaces in the Lean formal theorem prover."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://lean-forward.github.io/lean-together/2019/slides/buzzard.pdf"},"Using Lean with undergraduate mathematicians (2019)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://xenaproject.wordpress.com/what-does-lean-already-know/"},"What does Lean already know?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/semorrison/lean-category-theory"},"lean-category-theory")," - Experimental category theory library for Lean."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://ncatlab.org/nlab/show/Lean"},"Lean explained by nLab")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover-community/mathlib/blob/master/docs/theories/category_theory.md"},"Maths in Lean : category theory")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/UniMath/TypeTheory"},"TypeTheory")," - Mathematical study of type theories, in univalent foundations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ImperialCollegeLondon/M4P33"},"M4P33")," - Algebraic geometry course in Lean."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover/lean4"},"Lean 4 code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover-community/lean"},"Lean 3 code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://ahelwer.ca/post/2020-04-05-lean-assignment/"},"Doing a math assignment with the Lean theorem prover (2020)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/blanchette/logical_verification_2020/blob/master/hitchhikers_guide.pdf"},"Hitchhiker\u2019s Guide to Logical Veri\ufb01cation")," (",(0,i.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=22794533"},"HN"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/"},"Natural Number Game")," (",(0,i.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=22801607"},"HN"),") (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/ImperialCollegeLondon/natural_number_game"},"Code"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/dselsam/certigrad"},"Certigrad")," - Bug-free machine learning on stochastic computation graphs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ImperialCollegeLondon/dots_and_boxes"},"Ellen's dots and boxes project"),' - Contains all the code written for my final year research project in Mathematics, "Optimal gameplay in Dots and Boxes in Lean".'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.quantamagazine.org/building-the-mathematical-library-of-the-future-20201001/"},"Building the Mathematical Library of the Future (2020)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/"},"A Review of the Lean Theorem Prover (2018)")," (",(0,i.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=25550240"},"HN"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leanprover-community.github.io/lt2021/"},"Lean Together 2021")," - Meeting for Lean users and other formalizers. (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover-community/lt2021"},"Code"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/rwbarton/advent-of-lean-4"},"Advent of Code 2020 puzzles in Lean 4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/2101.02602"},"Schemes in Lean (2021)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/duckki/lean-quantum"},"Quantum Computing in Lean")," - Formalized quantum computing in Lean theorem prover."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/jesse-michael-han/lean-gptf"},"lean-gptf")," - Interactive neural theorem proving in Lean."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/flypitch/flypitch"},"Flypitch")," - Formal proof of the independence of the continuum hypothesis. (",(0,i.kt)("a",{parentName:"li",href:"https://flypitch.github.io/"},"Web"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/jesse-michael-han/lean-parser-combinators"},"Monadic parser combinators, in Lean")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Kha/elan"},"elan")," - Lean version manager."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leanprover-community.github.io/"},"Lean Community")," (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover-community/leanprover-community.github.io"},"Code"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/kmill/lean4-raytracer"},"Simple ray tracer in Lean 4")," (",(0,i.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=25987949"},"HN"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/groupoid/lean"},"Ground Zero")," - Provides computable HITs, variation of Cubical Type Theory using them, and some other math."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/nyuichi/LeanHOL"},"Lean HOL")," - Tiny implementation of higher-order logic proof assistant in lean."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/2102.02901"},"Formal [Lean] Proof of the Independence of the Continuum Hypothesis (2021)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://xenaproject.wordpress.com/2021/01/21/formalising-mathematics-an-introduction/"},"Formalising Mathematics: An Introduction (2021)")," (",(0,i.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=26214593"},"HN"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/mhuisi/lean4-cli"},"lean4-cli")," - A Lean 4 library for configuring Command Line Interfaces and parsing command line arguments. (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/yatima-inc/Cli.lean"},"Fork"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover/tc"},"Lean reference type-checker")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/google/formal-ml"},"Formal ML")," - LEAN library for proving foundational results in measure theory, probability, statistics, and machine learning, based upon mathlib."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/IPDSnelting/tba-2021"},"Lean 4 course Theorem prover lab: applications in programming languages")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.quantamagazine.org/lean-computer-program-confirms-peter-scholze-proof-20210728/"},"\u201cLean\u201d Computer Program Confirms Peter Scholze Proof (2021)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Julian/lean.nvim"},"lean.nvim")," - Neovim support for the Lean theorem prover."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/2108.00484"},"Elements of Differential Geometry in Lean: A Report for Mathematicians (2021)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/gebner/quote4"},"quote4")," - Intuitive, type-safe expression quotations for Lean 4."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover-contrib/leanprover-contrib"},"leanprover-contrib")," - Basic checkin/CI for Lean projects that are not part of mathlib."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover-community/mathlib4"},"mathlib4")," - Mathlib port for Lean 4."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://cs.brown.edu/courses/cs1951x/"},"Brown CS 1951x: Formal Proof and Verification, 2021")," (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/BrownCS1951x/fpv2021"},"Code"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ImperialCollegeLondon/M40001_lean"},"Introduction to University Mathematics Course: using Lean (2021)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover/mathport"},"Mathport")," - Tool for porting Lean3 projects to Lean4."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover-community/tutorials"},"Lean Tutorials")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/openai/lean-gym"},"lean-gym")," - Interact with Lean through a REPL."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://twitter.com/XenaProject/status/1462740182789234690"},"How Lean compares to Coq/Isabelle/HOL")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/siddhartha-gadgil/Saturn"},"SATurn")," - SAT solver-prover in lean 4 based on the DPLL algorithm."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/JLimperg/aesop"},"Aesop")," - White-box automation for Lean 4."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/hargoniX/doc-gen4"},"doc-gen4")," - Document Generator for Lean 4."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/isadofschi/combinatorial_nullstellensatz"},"Lean formal proof of the Combinatorial Nullstellensatz")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/tydeu/lean4-alloy"},"Alloy")," - Lean 4 library that allows one to embedded external FFI code (currently just C) within Lean definitions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/joehendrix/lean-sat-checker"},"Lean SAT Proof Checker")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/arthurpaulino/NumLean"},"NumLean")," - Lean 4 package for heavy numerical computations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Julian/tree-sitter-lean"},"tree-sitter-lean")," - Experimental tree-sitter parser for Lean."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/javra/iit"},"Inductive-Inductive Types for Lean 4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/lecopivo/SciLean"},"SciLean")," - Framework for scientific computing written in Lean."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/FWuermse/lean-postgres"},"Lean4 Postgresql Frontend-Backend-protocol")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/avigad/qpf"},"Data Types as Quotients of Polynomial Functors")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/b-mehta/unit-fractions"},"Unit fractions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/b-mehta/topos"},"Topos theory for Lean")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover-community/lftcm2020"},"Lean for the Curious Mathematician 2020")," (",(0,i.kt)("a",{parentName:"li",href:"https://leanprover-community.github.io/lftcm2020/"},"Web"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/forked-from-1kasper/ground_zero"},"Ground Zero")," - Library provides computable HITs, variation of Cubical Type Theory using them, and some other math."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/arthurpaulino/lean4-metaprogramming-book"},"Lean 4 Metaprogramming Book")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/PatrickMassot/lean-verbose"},"Lean verbose")," - Controlled natural language tactics for Lean."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/forked-from-1kasper/bump"},"BUM")," - Lean 4 Package Manager."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/gabriel-fallen/bidirectional-demo"},"Simple bidirectional type-checker in Lean 4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/dwrensha/lean4-maze"},"Maze game encoded in Lean 4 syntax")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/opencompl/lean-mlir-semantics"},"Model and framework to prove formal semantics of MLIR programs in Lean4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/zygi/lean-protoc-plugin"},"Protocol buffers in Lean 4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/opencompl/lean-gap"},"GAP-LEAN")," - GAP parser, pretty printer, interpreter, and formal semantics."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/joehendrix/lean-crypto"},"Cryptography in Lean 4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/yatima-inc/OpenGL.lean"},"OpenGL Lean bindings")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover-community/flt-regular"},"Fermat's Last Theorem for regular primes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/bollu/lean-to"},"Lean-to")," - Jupyter shelter for your Lean4 code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/lecopivo/HouLean"},"Lean 4 as a scripting language in Houdini")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/yatima-inc/Http.lean"},"HTTP.lean")," - Uses Socket.lean to create basic HTTP functionality."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/xubaiw/Socket.lean"},"Lean 4 Socket")," - Implementation of socket programming for Lean 4."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/xubaiw/Unicode.lean"},"Unicode.lean")," - Unicode related operations for Lean 4."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/yatima-inc/Parsec.lean"},"Parsec.lean")," - Parser combinators for Lean."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Anderssorby/Nix.lean"},"Nix expressions and derivations in lean")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/leanprover/doc-gen4"},"doc-gen4")," - Document Generator for Lean 4."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/lecopivo/lean4-karray"},"lean4-karray")," - Package that allows automatic C code generation for functions defined in Lean."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ImperialCollegeLondon/formalising-mathematics-2022"},"Lean material for Kevin Buzzard's Jan-Mar 2022 course on formalizing mathematics")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/siddhartha-gadgil/Polylean"},"Formalization of Gardam's disproof of the unit conjecture in Lean")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/yatima-inc/Ipld.lean"},"Lean Ipld")," - Lean4 implementation of the IPLD format."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leanprover.github.io/functional_programming_in_lean/"},"Functional Programming in Lean"))))}s.isMDXComponent=!0}}]);