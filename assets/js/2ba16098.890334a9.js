"use strict";(self.webpackChunkkinderheim=self.webpackChunkkinderheim||[]).push([[8507],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var r=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),h=s(a),u=o,g=h["".concat(l,".").concat(u)]||h[u]||c[u]||n;return a?r.createElement(g,i(i({ref:t},p),{},{components:a})):r.createElement(g,i({ref:t},p))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,i=new Array(n);i[0]=h;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m.mdxType="string"==typeof e?e:o,i[1]=m;for(var s=2;s<n;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},80133:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return m},metadata:function(){return s},toc:function(){return c}});var r=a(87462),o=a(63366),n=(a(67294),a(3905)),i=["components"],m={},l="Memory management",s={unversionedId:"programming/memory-management/memory-management",id:"programming/memory-management/memory-management",title:"Memory management",description:"Notes",source:"@site/docs/programming/memory-management/memory-management.md",sourceDirName:"programming/memory-management",slug:"/programming/memory-management/",permalink:"/kinderheim/programming/memory-management/",draft:!1,editUrl:"https://github.com/ecioran/kinderheim/docs/programming/memory-management/memory-management.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Logic programming",permalink:"/kinderheim/programming/logic-programming"},next:{title:"Object-oriented programming",permalink:"/kinderheim/programming/object-oriented-programming"}},p={},c=[{value:"Notes",id:"notes",level:2},{value:"Links",id:"links",level:2}],h={toc:c};function u(e){var t=e.components,a=(0,o.Z)(e,i);return(0,n.kt)("wrapper",(0,r.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"memory-management"},"Memory management"),(0,n.kt)("h2",{id:"notes"},"Notes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://twitter.com/pcwalton/status/1457170874402967553"},"Reference counting is a form of garbage collection"))),(0,n.kt)("h2",{id:"links"},"Links"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://people.freebsd.org/~lstewart/articles/cpumemory.pdf"},"What Every Programmer Should Know About Memory (2007)")," (",(0,n.kt)("a",{parentName:"li",href:"https://lwn.net/Articles/250967/"},"Web"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.memorymanagement.org/"},"Memory Management Reference")," - Resource for programmers and computer scientists interested in memory management and garbage collection."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.ravenbrook.com/project/mps/"},"Memory Pool System")," - Flexible and adaptable memory manager. Among its many advantages are an incremental garbage collector with very low pause times, and an extremely robust implementation. (",(0,n.kt)("a",{parentName:"li",href:"https://github.com/Ravenbrook/mps"},"Code"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.researchgate.net/publication/221321424_A_unified_theory_of_garbage_collection"},"A unified theory of garbage collection (2004)")," (",(0,n.kt)("a",{parentName:"li",href:"https://courses.cs.washington.edu/courses/cse590p/05au/p50-bacon.pdf"},"PDF"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.forrestthewoods.com/blog/memory-bandwidth-napkin-math/"},"Memory Bandwidth Napkin Math (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/struct/isoalloc"},"Isolation Alloc")," - New general purpose secure memory allocator that implements an isolation security strategy to mitigate memory safety issues."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/zesterer/broom"},"Broom")," - Ergonomic tracing garbage collector that supports mark 'n sweep garbage collection."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://dmitrysoshnikov.com/compilers/writing-a-memory-allocator/"},"Writing a Memory Allocator (2019)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=25402841"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://dmitrysoshnikov.com/compilers/writing-a-pool-allocator/"},"Writing a Pool Allocator (2019)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://dmitrysoshnikov.com/compilers/writing-a-mark-sweep-garbage-collector/"},"Writing a Mark-Sweep Garbage Collector (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/mjansson/rpmalloc"},"rpmalloc")," - Cross platform lock free thread caching 16-byte aligned memory allocator implemented in C."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/WuBingzheng/memleax"},"memleax")," - Debugs memory leak of a running process by attaching it, without recompiling or restarting."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.internalpointers.com/post/introduction-virtual-memory"},"An introduction to virtual memory (2020)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=23096747"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://deepu.tech/memory-management-in-rust/"},"Visualizing memory management in Rust (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory"},"Memory Allocators 101 - Write a simple memory allocator (2015)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/gperftools/gperftools"},"gperftools")," - Collection of a high-performance multi-threaded malloc() implementation, plus some pretty nifty performance analysis tools."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.cs.utexas.edu/~bornholt/post/memory-models.html"},"Memory Consistency Models: A Tutorial (2016)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=23546316"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://canonical.org/~kragen/memory-models/"},"The memory models that underlie programming languages (2016)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=27455509"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e"},"Modern garbage collection (2016)")," - A look at the Go GC strategy."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://ourmachinery.com/post/virtual-memory-tricks/"},"Virtual Memory Tricks (2017)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://twitter.com/mraleph/status/1305209967641796611"},"Reference counting vs GC (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://blog.janestreet.com/memory-allocator-showdown/"},"Memory allocator showdown (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://tasvideos.org/Nach/MemoryInit.html"},"Understanding memory initialization patterns")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://slembcke.github.io/2020/10/12/CustomAllocators.html"},"Custom Allocators Demystified (2020)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=24762840"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/mmtk/mmtk-core"},"MMTk")," - Framework for the design and implementation of memory managers. In Rust."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://people.cs.umass.edu/~emery/pubs/gcvsmalloc.pdf"},"Quantifying the Performance of Garbage Collection vs. Explicit Memory Management (2005)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://catb.org/esr/structure-packing/"},"The Lost Art of Structure Packing")," - Technique for reducing the memory footprint of programs in compiled languages with C-like structures - manually repacking these declarations for reduced size."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/dkopko/klox"},"klox")," - Proof-of-concept demonstration of O(1) garbage collection. (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=25161666"},"HN"),") (",(0,n.kt)("a",{parentName:"li",href:"https://lobste.rs/s/z96jmk/experimental_o_1_garbage_collector"},"Lobsters"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/herd/herdtools7"},"herdtools7")," - Tool suite to test weak memory models."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://2020.splashcon.org/details/splash-2020-oopsla/52/Sound-Garbage-Collection-for-C-using-Pointer-Provenance"},"Sound Garbage Collection for C using Pointer Provenance (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://aardappel.github.io/lobster/memory_management.html"},"Memory Management in Lobster")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://vale.dev/blog/generational-references"},"Generational references faster than reference counting (2021)")," (",(0,n.kt)("a",{parentName:"li",href:"https://lobste.rs/s/sglvcc/generational_references_2_3x_faster_than"},"Lobsters"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.algolia.com/blog/engineering/when-allocators-are-hoarding-your-precious-memory/"},"When allocators are hoarding your precious memory (2021)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://maplant.com/gc.html"},"Writing a Simple Garbage Collector in C (2020)")," (",(0,n.kt)("a",{parentName:"li",href:"https://lobste.rs/s/dd8k4k/writing_simple_garbage_collector_c_2020"},"Lobsters"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://neelbakshi.medium.com/a-look-into-automatic-reference-counting-b17e9539d34f"},"A look into Automatic Reference Counting (2021)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/grin-compiler/ghc-whole-program-compiler-project/issues/5"},"Papers for heap memory analysis and leak detection (2021)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/plasma-umass/memory-landscape"},"Memory Management Landscape")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://eschew.wordpress.com/2016/09/02/summarizing-gc/"},"Summarizing Garbage Collection (2016)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://spin.atomicobject.com/2014/09/03/visualizing-garbage-collection-algorithms/"},"Visualizing Garbage Collection Algorithms (2014)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/"},"Baby's First Garbage Collector (2013)")," - Building simple mark-sweep garbage collector in C. (",(0,n.kt)("a",{parentName:"li",href:"https://github.com/munificent/mark-sweep"},"Code"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/d99kris/heapusage"},"Heapusage")," - Find memory leaks in Linux and macOS applications."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/backtrace-labs/slitter"},"Slitter")," - C- and Rust-callable slab allocator implemented primarily in Rust, with some C for performance or to avoid unstable Rust features."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://reports-archive.adm.cs.cmu.edu/anon/2021/CMU-CS-21-113.pdf"},"Mitigating Memory-Safety Bugs with Efficient Out-of-Process Integrity Checking (2021)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://about.sourcegraph.com/blog/zoekt-memory-optimizations-for-sourcegraph-cloud/"},"A 5x reduction in RAM usage with Zoekt memory optimizations (2021)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=28237556"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://yorickpeterse.com/articles/friendship-ended-with-the-garbage-collector/"},"Friendship ended with the garbage collector (2021)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=28305762"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://overcast.fm/+GnKYmRs1E"},"Don\u2019t forget about memory management \u2014 Go Time (2021)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/johnsonjh/duma"},"DUMA")," - Detect Unintended Memory Access. Red-Zone memory allocator."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/bytecodealliance/regalloc2"},"regalloc2")," - New register allocator."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/arthuraa/memory-safe-language"},"Formalization of properties of a simple imperative, memory-safe language")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/aclements/mtrace"},"mtrace")," - Version of QEMU modified to log memory accesses and other system events to help analyze and understand the memory access patterns and cache line behavior of operating system-level code."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.intel.com/content/www/us/en/developer/articles/technical/memory-performance-in-a-nutshell.html"},"Memory Performance in a Nutshell")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/rain-1/awesome-allocators"},"Awesome Allocators")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://blog.gceasy.io/2021/10/15/interesting-garbage-collection-patterns/"},"Interesting Garbage Collection Patterns (2021)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/kuszmaul/SuperMalloc"},"SuperMalloc")," - Super Fast Multithreaded malloc() for 64-bit Machines."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/microsoft/mimalloc"},"Mimalloc")," - Compact general purpose allocator with excellent performance."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.microsoft.com/en-us/research/uploads/prod/2019/06/mimalloc-tr-v1.pdf"},"Mimalloc: Free List Sharding in Action (2019)")," (",(0,n.kt)("a",{parentName:"li",href:"https://lobste.rs/s/4awecj/mimalloc_free_list_sharding_action"},"Lobsters"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://twitter.com/pcwalton/status/1456518483315810308"},"Garbage collection algorithms")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/zznop/vizzy"},"Vizzy")," - Tool for profiling heap usage and memory management."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/apple/GCGC"},"GCGC : Garbage Collection Graph Collector")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/smasher164/mem"},"mem")," - Memory allocator for Go."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/nadavrot/memset_benchmark"},"100LOC C impl of memset, that is faster than glibc's")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=29197161"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://blog.unity.com/technology/debugging-memory-corruption-who-the-hell-writes-2-into-my-stack-2"},"Debugging memory corruption: who the hell writes \u201c2\u201d into my stack? (2016)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=29215725"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/pop-os/bustd"},"bustd")," - Lightweight process killer daemon for out-of-memory scenarios for Linux."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=vHWiDx_l4V0"},"What's a Memory Allocator Anyway? - Benjamin Feng (2021)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://gchandbook.org/"},"The Garbage Collection Handbook: The art of automatic memory management (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/memflow/memflow"},"memflow")," - Physical memory introspection framework. (",(0,n.kt)("a",{parentName:"li",href:"https://memflow.github.io/#/home"},"Web"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/memflow/scanflow"},"scanflow")," - Comprehensive memory scanning library based on memflow."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/thi-ng/tinyalloc"},"tinyalloc")," - Replacement for malloc / free in unmanaged, linear memory situations, e.g. WASM and embedded devices."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/quark-zju/gcmodule"},"gcmodule")," - Garbage collection for Rust inspired by CPython's gcmodule."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://twitter.com/nadavrot/status/1464364562409422852"},"Optimising memset and memcpy")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=29359906"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://users.cecs.anu.edu.au/~steveb/pubs/papers/g1-vee-2020.pdf"},"Deconstructing the Garbage-First Collector (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/matthieu-m/llmalloc"},"llmalloc")," - Low-latency malloc implementation."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/2110.01098"},"Does the Bronze Garbage Collector Make Rust Easier to Use? A Controlled Experiment (2021)")," (",(0,n.kt)("a",{parentName:"li",href:"https://lobste.rs/s/dvwomq/does_bronze_garbage_collector_make_rust"},"Lobsters"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/GrapheneOS/hardened_malloc"},"Hardened malloc")," - Hardened allocator designed for modern systems."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/pdf/2112.07880.pdf"},"An Empirical Lower Bound on the Overheads of Production Garbage Collectors (2021)")," (",(0,n.kt)("a",{parentName:"li",href:"https://twitter.com/halvarflake/status/1471442159618437122"},"Tweet"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/nolanlawson/fuite"},"Fuite")," - CLI tool for finding memory leaks in web apps. (",(0,n.kt)("a",{parentName:"li",href:"https://nolanlawson.com/2021/12/17/introducing-fuite-a-tool-for-finding-memory-leaks-in-web-apps/"},"Article"),") (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=29593341"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/suzusuzu/malloc-rs"},"malloc-rs")," - Implementation of malloc, realloc, calloc, and free in Rust."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/Hejsil/zig-gc"},"zig-gc")," - Simple mark-and-sweep garbage collector written in Zig."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://fasterthanli.me/articles/declarative-memory-management"},"Declarative memory management (2019)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=29779827"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://signalsandthreads.com/memory-management/"},"Signals and Threads | Memory Management (2022)")," (",(0,n.kt)("a",{parentName:"li",href:"https://lobste.rs/s/testaq/memory_management"},"Lobsters"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/kaist-hacking/HardsHeap"},"HardsHeap")," - Universal and Extensible Framework for Evaluating Secure Allocators."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/CertiGraph/CertiGC"},"CertiGC")," - Formally verified generational garbage collector."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://blog.dnmfarrell.com/post/how-much-memory-is-my-program-really-using/"},"How Much Memory Is My Program Really Using? (2022)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/ivmai/tinygc"},"TinyGC (Tiny Garbage Collector)")," - Implementation of the subset of API of the well-known Boehm-Demers-Weiser Conservative GC."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://gankra.github.io/blah/tower-of-weakenings/"},"The Tower of Weakenings: Memory Models For Everyone (2022)")," (",(0,n.kt)("a",{parentName:"li",href:"https://www.reddit.com/r/rust/comments/tx6h0m/the_tower_of_weakenings_memory_models_for_everyone/"},"Reddit"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://jjfumero.github.io/posts/2022/04/understanding-memory-allocation-size-limitations-with-levelzero/"},"Understanding Memory Allocation Size Limitations with Level Zero (2022)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://coredumped.dev/2022/04/11/implementing-a-safe-garbage-collector-in-rust/"},"Implementing a safe garbage collector in Rust (2022)")," (",(0,n.kt)("a",{parentName:"li",href:"https://www.reddit.com/r/rust/comments/u21w97/implementing_a_safe_garbage_collector_in_rust/"},"Reddit"),") (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=31166368"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/wingo/gcbench"},"GC workbench")," - Workspace for experimenting with garbage collectors."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://atp.fm/205-chris-lattner-interview-transcript#gc"},"Chris Lattner on garbage collection vs. Automatic Reference Counting (2017)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=31139610"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://users.cecs.anu.edu.au/~steveb/pubs/papers/lxr-pldi-2022.pdf"},"Low-Latency, High-Throughput Garbage Collection (2022)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://users.cecs.anu.edu.au/~steveb/pubs/papers/lbo-ispass-2022.pdf"},"Distilling the Real Cost of Production Garbage Collectors (2022)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=31192261"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://davmac.wordpress.com/2022/04/30/forgetting-about-the-problem-of-memory/"},"Forgetting about the problem of memory (2022)")," (",(0,n.kt)("a",{parentName:"li",href:"https://lobste.rs/s/3njgz4/forgetting_about_problem_memory"},"Lobsters"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://awesomekling.github.io/Memory-safety-for-SerenityOS/"},"Memory safety for SerenityOS (2022)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.forrestthewoods.com/blog/benchmarking-malloc-with-doom3/"},"Benchmarking Malloc with Doom 3 (2022)"))))}u.isMDXComponent=!0}}]);