"use strict";(self.webpackChunkkinderheim=self.webpackChunkkinderheim||[]).push([[3443],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),h=p(r),m=a,s=h["".concat(l,".").concat(m)]||h[m]||y[m]||o;return r?n.createElement(s,i(i({ref:t},u),{},{components:r})):n.createElement(s,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},86426:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return y}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),i=["components"],c={title:"Cubical type theory"},l="[Cubical type theory](https://ncatlab.org/nlab/show/cubical+type+theory)",p={unversionedId:"math/type-theory/cubical-type-theory",id:"math/type-theory/cubical-type-theory",title:"Cubical type theory",description:"Cubical 1Lab is great resource.",source:"@site/docs/math/type-theory/cubical-type-theory.md",sourceDirName:"math/type-theory",slug:"/math/type-theory/cubical-type-theory",permalink:"/kinderheim/math/type-theory/cubical-type-theory",draft:!1,editUrl:"https://github.com/ecioran/kinderheim/docs/math/type-theory/cubical-type-theory.md",tags:[],version:"current",frontMatter:{title:"Cubical type theory"},sidebar:"tutorialSidebar",previous:{title:"Computational type theory",permalink:"/kinderheim/math/type-theory/computational-type-theory"},next:{title:"Dependent types",permalink:"/kinderheim/math/type-theory/dependent-types"}},u={},y=[{value:"Links",id:"links",level:2}],h={toc:y};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cubical-type-theory"},(0,o.kt)("a",{parentName:"h1",href:"https://ncatlab.org/nlab/show/cubical+type+theory"},"Cubical type theory")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://1lab.dev/"},"Cubical 1Lab")," is great resource."),(0,o.kt)("h2",{id:"links"},"Links"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/mortberg/cubicaltt"},"Experimental implementation of Cubical Type Theory in which the user can directly manipulate n-dimensional cubes")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/dlicata335/cart-cube"},"Cartesian Cubical Type Theory")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/RedPRL/sml-redprl"},"RedPRL")," - Purpose of RedPRL is to provide a practical implementation of Computational Cubical Type Theory in the Nuprl style, integrating modern advances in proof refinement."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/RedPRL/redtt"},"redtt")," - Core language for cartesian cubical type theory with extension types."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/RedPRL/cooltt"},"cooltt")," - A cool implementation of normalization by evaluation (nbe) & elaboration for Cartesian cubical type theory."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://1lab.dev/"},"Cubical 1Lab")," - Formalised, cross-linked reference resource for mathematics done in Homotopy Type Theory. (",(0,o.kt)("a",{parentName:"li",href:"https://github.com/isovector/blagda"},"Code"),")")))}m.isMDXComponent=!0}}]);