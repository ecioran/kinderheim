"use strict";(self.webpackChunkkinderheim=self.webpackChunkkinderheim||[]).push([[4260],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,h=u["".concat(i,".").concat(d)]||u[d]||m[d]||l;return t?a.createElement(h,o(o({ref:n},c),{},{components:t})):a.createElement(h,o({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8738:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var a=t(7462),r=t(3366),l=(t(7294),t(3905)),o=["components"],s={},i="CMDs",p={unversionedId:"code/cmd",id:"code/cmd",title:"CMDs",description:"screencapture (capture images from screen)",source:"@site/docs/code/cmd.md",sourceDirName:"code",slug:"/code/cmd",permalink:"/kinderheim/code/cmd",draft:!1,editUrl:"https://github.com/ecioran/kinderheim/docs/code/cmd.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CMD Run",permalink:"/kinderheim/code/cmd-run"},next:{title:"Config",permalink:"/kinderheim/code/config"}},c={},m=[{value:"screencapture (capture images from screen)",id:"screencapture-capture-images-from-screen",level:3},{value:"docker (run processes in isolated containers)",id:"docker-run-processes-in-isolated-containers",level:3},{value:"kubectl (run commands against Kubernetes clusters)",id:"kubectl-run-commands-against-kubernetes-clusters",level:3}],u={toc:m};function d(e){var n=e.components,t=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"cmds"},"CMDs"),(0,l.kt)("h3",{id:"screencapture-capture-images-from-screen"},(0,l.kt)("a",{parentName:"h3",href:"https://ss64.com/osx/screencapture.html"},"screencapture")," (capture images from screen)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Take screenshot & save it to Desktop with current date as name\nscreencapture -ixoa -t jpg ~/"Desktop/$(date).jpg"\n')),(0,l.kt)("h3",{id:"docker-run-processes-in-isolated-containers"},(0,l.kt)("a",{parentName:"h3",href:"https://github.com/docker/cli"},"docker")," (run processes in isolated containers)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Delete all containers\nfor i in $(docker ps -a -q); do docker rm $i; done\n\n# List all containers\ndocker ps -a\n\n# Remove a container after it\u2019s stopped\ndocker run --rm [...]\n")),(0,l.kt)("h3",{id:"kubectl-run-commands-against-kubernetes-clusters"},(0,l.kt)("a",{parentName:"h3",href:"https://kubernetes.io/docs/reference/kubectl/overview/"},"kubectl")," (run commands against Kubernetes clusters)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Get info on pods in use. Has info on why they failed if they did.\nkubectl describe pods\n\n# Get services across all namespaces\nkubectl get svc --all-namespaces\n\n# Port forward the <pod> from 5432 to localhost 5300 port\nkubectl port-forward <pod> 5300:5432\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://nixos.wiki/wiki/Nix-env"},"nix-env")," (manipulate or query Nix user environments)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# See installed packages\nnix-env -q\n\n# Install packages\nnix-env -iA\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/1/basename"},"basename")," (strip directory and suffix from filenames)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'basename "/Users/nikivi/Documents/books/Thinking, fast and slow.pdf" # => Thinking, fast and slow.pdf\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/1/chmod"},"chmod")," (change file mode bits)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# All users can read and write but cannot execute\nchmod 666\n\n# All actions for all users\nchmod 777\n\n# Only owner can do all actions; group and other users are allowed only to read\nchmod 744\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/1/tail"},"tail")," (output the last part of files) ",(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/tail"},"https://www.explainshell.com/explain/tail")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Shows the last 10 lines of file\ntail /etc/passwd\n\n# -n option allows to change the number of lines to display\n# where n is the number of lines you want to see\n# ie\ntail -5 /etc/passwd\n\n# Use tail +n to print lines starting at line n\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/plutov/playgo"},"playgo")," (send .go file to the Go Playground)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Open Go playground of file in browser\nplaygo <file>\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/tr"},"tr")," (translate or delete characters)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Convert all input to upper case\nls | tr a-z a-z\n\n# Take the output and put into a single line\nls | tr  "\\n" " "\n\n# Get rid of all numbers\nls -lt | tr -d 0-9\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/diff"},"diff")," (compare files line by line)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Compare file1 with file2\ndiff file1 file2\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/find"},"find")," (walk a file hierarchy)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Will search in current directory (.) for the file 'hello_world.py'\n# and will return the path to the file\nfind . -name 'hello_world.py'\n\n# You can also search multiple directories\n# will search both Documents and Desktop folders for the file\nfind Documents Desktop -name 'hello_world.py'\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/grep"},"grep")," (file pattern searcher)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Print lines from a file or input stream that match an expression\n\n# -i = case insensitive search\n\n# -v = return all lines that do not contain {}\ngrep -v {} story.txt\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/man"},"man")," (open manual pages)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Search for manual page by keyword\nman -k keyword\n\n# ie if you are looking for command to sort something, run\n# output will include man page name, man section and quick description\nman -k sort\n\n# **Online manual sections**\n\n# (1) = user commands\n# (2) = system calls\n# (3) = higher-level unix programming library documentation\n# (4) = device interface and driver information\n# (5) = file descriptions (system configuration files)\n# (6) = games\n# (7) = file formats, conventions, and encodings (ASCII, suffixes, and so on)\n# (8) = system commands and servers\n\n# Open manual page of passwd on section 5\nman 5 passwd\n\n# I can often get information about options of some command using either --help or -h flags\n# ie\nvim --help # vim -h would also work\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/sort"},"sort")," (put the lines of a text file in alphanumeric order)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Will process the results of ps aux command with grep\n# and will then sort the output with 'sort' command\nps aux | grep bash | sort\n\n# -n option sorts in numerical order\n# -r option reverses the order of the sort\n")),(0,l.kt)("p",null,"PlistBuddy (read and write values to plists)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Change version of Alfred workflow info.plist\n/usr/libexec/PlistBuddy -c "Set :version \\"X.Y.Z\\"" info.plist\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/kill"},"kill")," (send a signal to a process)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Force quit the process with id 1456\nkill -9 1456\n\n# Stop process 1456\nkill -STOP 1456\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.explainshell.com/explain/head"},"head")," (output the first part of files)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Shows the first 10 lines of file\nhead /etc/passwd\n\n# -n option allows to change the number of lines to display\n# where n is the number of lines you want to see\n# ie\nhead -5 /etc/passwd\n")),(0,l.kt)("p",null,"tar (manipulate tape archives)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Extract tar files. -x = 'extract'. -v = verbose. -f = point to tar fle\ntar -xvf some_file.tar.gz\n")),(0,l.kt)("p",null,"env (set environment and execute command, or print environment)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# View enviroment variables\nenv\n\n# Variables to know\n$HOME # Expands to the path of my home folder\n$PS1 # Represents my command prompt line\n\n# I can thus change the way my command prompt looks like this\nPS1="\\w >"\n\n$PATH # Lists all the directories that can be executable with commands\n\n# Add directory /Users/nikivi/bin to the path\nexport PATH=/Users/nikivi/bin:$PATH\n\n# If you put executables there, they will be available\n\n# Exported variables get passed on to child processes. Not-exported variables do not.\n')),(0,l.kt)("p",null,"cat (concatenate and print files)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Print what is in file1 and file2 to screen\ncat file1 file2\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/bubenshchykov/ngrok"},"ngrok")," (expose your localhost to the web)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Creates a shareable link of my local server on port 3000\nngrok http 3000\n")),(0,l.kt)("p",null,"rmdir (remove empty directories)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Remove directory\nrmdir dir\n\n# Remove non empty directores\nrm -rf dir\n\n# Don't use -rf flags with globs such as star (*)\n# Best to double check commands before running\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/xdamman/mediumexporter"},"mediumexporter")," (export medium.com articles to markdown)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# i.e.\nmediumexporter https://medium.com/@nikitavoloboev/karabiner-god-mode-7407a5ddc8f6 > medium_post.md\n")),(0,l.kt)("p",null,"file (determine file type)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# See type of file\nfile <file>\n")),(0,l.kt)("p",null,"time (time command execution)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Time how long command took to run\ntime <cmd>\n")))}d.isMDXComponent=!0}}]);