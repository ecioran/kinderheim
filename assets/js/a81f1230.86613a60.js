"use strict";(self.webpackChunkkinderheim=self.webpackChunkkinderheim||[]).push([[11711],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return g}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),g=n,h=c["".concat(s,".").concat(g)]||c[g]||m[g]||o;return r?a.createElement(h,i(i({ref:t},u),{},{components:r})):a.createElement(h,i({ref:t},u))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},20469:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var a=r(87462),n=r(63366),o=(r(67294),r(3905)),i=["components"],l={title:"Language Server Protocol"},s="[Language Server Protocol](https://microsoft.github.io/language-server-protocol/)",p={unversionedId:"programming-languages/language-server-protocol",id:"programming-languages/language-server-protocol",title:"Language Server Protocol",description:"Links",source:"@site/docs/programming-languages/language-server-protocol.md",sourceDirName:"programming-languages",slug:"/programming-languages/language-server-protocol",permalink:"/kinderheim/programming-languages/language-server-protocol",draft:!1,editUrl:"https://github.com/ecioran/kinderheim/docs/programming-languages/language-server-protocol.md",tags:[],version:"current",frontMatter:{title:"Language Server Protocol"},sidebar:"tutorialSidebar",previous:{title:"Kotlin libraries",permalink:"/kinderheim/programming-languages/kotlin/kotlin-libraries"},next:{title:"Lisp",permalink:"/kinderheim/programming-languages/lisp/"}},u={},m=[{value:"Links",id:"links",level:2}],c={toc:m};function g(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"language-server-protocol"},(0,o.kt)("a",{parentName:"h1",href:"https://microsoft.github.io/language-server-protocol/"},"Language Server Protocol")),(0,o.kt)("h2",{id:"links"},"Links"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.reddit.com/r/vim/comments/b3yzq4/a_lsp_client_maintainers_view_of_the_lsp_protocol/"},"A LSP client maintainer's view of the LSP protocol (2019)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/gluon-lang/lsp-types"},"lsp-types")," - Types for communicating with a language server."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=-T066JoO0hE"},"Kryzystof Cieslak - LSP: the magic behind your IDE (2019)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/rust-analyzer/lsp-server"},"lsp-server")," - Language server scaffold exposing a crossbeam-channel API."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/sourcegraph/lsif-test"},"LSIF development and testing utilities")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/sourcegraph/lsif-protocol"},"LSIF protocol utilities for Go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/bubba/lsp-test"},"lsp-test")," - Functional testing framework for Language Server Protocol servers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/adrienjoly/algocodesearch"},"algocodesearch")," - Index symbols from a language server (LSP), for code search."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://lsif.dev/"},"LSIF.dev")," - Community-driven source of knowledge for Language Server Index Format implementations."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/johejo/lsm"},"Language Server Manager (LSM)")," - Aims to be a simple and cross platform installation manager for Language Server."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/hvithrafn/lspower"},"lspower")," - Rust library for the Language Server Protocol (LSP)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/microsoft/vscode-json-languageservice"},"vscode-json-languageservice")," - JSON language service extracted from VSCode to be reused, e.g in the Monaco editor."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/bkomuves/toy-language-server"},"Minimalistic language server (LSP) implementation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/jose-elias-alvarez/null-ls.nvim"},"null-ls.nvim")," - Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/mattn/efm-langserver"},"efm-langserver")," - General purpose Language Server."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/ChimeHQ/LanguageClient"},"LanguageClient")," - Language Server Protocol (LSP) client for Swift."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.reddit.com/r/rust/comments/sszwvz/a_simple_tool_kit_helping_you_create_language/"},"A simple tool kit helping you create language server with Rust (2022)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/IWANABETHATGUY/tower-lsp-boilerplate"},"Boilerplate for a rust language server powered by tower-lsp")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openlawlibrary/pygls"},"pygls")," - Pythonic generic implementation of the Language Server Protocol."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/c-cube/linol"},"Linol")," - Wrapper around the OCaml ",(0,o.kt)("inlineCode",{parentName:"li"},"lsp")," library to make it easier to write LSP servers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://matklad.github.io//2022/04/25/why-lsp.html"},"Why LSP? (2022)")," (",(0,o.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=31151048"},"HN"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/qualified/lsps"},"Monorepo of packages related to LSP"))))}g.isMDXComponent=!0}}]);