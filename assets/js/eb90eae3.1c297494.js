"use strict";(self.webpackChunkkinderheim=self.webpackChunkkinderheim||[]).push([[5437],{3905:function(e,t,a){a.d(t,{Zo:function(){return l},kt:function(){return u}});var r=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function h(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=r.createContext({}),m=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):h(h({},t),e)),a},l=function(e){var t=m(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=m(a),u=i,f=c["".concat(o,".").concat(u)]||c[u]||p[u]||n;return a?r.createElement(f,h(h({ref:t},l),{},{components:a})):r.createElement(f,h({ref:t},l))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,h=new Array(n);h[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,h[1]=s;for(var m=2;m<n;m++)h[m]=a[m];return r.createElement.apply(null,h)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},7682:function(e,t,a){a.r(t),a.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return p}});var r=a(7462),i=a(3366),n=(a(7294),a(3905)),h=["components"],s={},o="Hashing",m={unversionedId:"programming/hashing",id:"programming/hashing",title:"Hashing",description:"Links",source:"@site/docs/programming/hashing.md",sourceDirName:"programming",slug:"/programming/hashing",permalink:"/kinderheim/programming/hashing",draft:!1,editUrl:"https://github.com/ecioran/kinderheim/docs/programming/hashing.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Generalized algebraic data type",permalink:"/kinderheim/programming/functional-programming/gadts"},next:{title:"Interactive computing",permalink:"/kinderheim/programming/interactive-computing/"}},l={},p=[{value:"Links",id:"links",level:2}],c={toc:p};function u(e){var t=e.components,a=(0,i.Z)(e,h);return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"hashing"},"Hashing"),(0,n.kt)("h2",{id:"links"},"Links"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/Cyan4973/xxHash"},"xxHash")," - Extremely fast non-cryptographic hash algorithm."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://dominictarr.com/post/154769946347/fairly-tale-cryptography-2-hashes"},"Fairly tale cryptography 2: hashes")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/google/farmhash"},"FarmHash")," - Family of hash functions."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://codecapsule.com/tag/hash-table/"},"Articles on hashing implementations")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/10XGenomics/rust-boomphf"},"Fast and Scalable Minimal Perfect Hash Functions in Rust")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/Tessil/robin-map"},"Robin Map")," - C++ implementation of a fast hash map and hash set using robin hood hashing."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://programming.guide/robin-hood-hashing.html"},"Robin Hood Hashing")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/ymcidence/TBH"},"Auto-Encoding Twin-Bottleneck Hashing")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://thume.ca/2019/07/29/shenanigans-with-hash-tables/"},"Shenanigans With Hash Tables (2019)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/rurban/smhasher"},"SMhasher")," - Hash function quality and speed tests."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://dl.acm.org/doi/pdf/10.1145/3309206"},"Concurrent Hash Tables: Fast and General")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/in3rsha/sha256-animation"},"SHA-256 Animation")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=23165333"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/aappleby/smhasher"},"SMHasher")," - Test suite designed to test the distribution, collision, and performance properties of non-cryptographic hash functions."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/wangyi-fudan/wyhash"},"wyhash")," - Dream fast hash function and random number generators that passed SMHasher, BigCrush and practrand. (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=23282754"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/googleprojectzero/functionsimsearch"},"FunctionSimSearch")," - Example C++ code to demonstrate how to do SimHash-based similarity search over CFGs extracted from disassemblies."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/minio/highwayhash"},"HighwayHash")," - Native Go version of HighwayHash with optimized assembly implementations on Intel and ARM."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/serialx/hashring"},"hashring")," - Implements consistent hashing that can be used when the number of server nodes can increase or decrease (like in memcached)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/erthink/t1ha"},"t1ha")," - One of the fastest hash functions."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/tidwall/hashmap.c"},"hashmap.c")," - Hash map implementation in C."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://martin.ankerl.com/2019/04/01/hashmap-benchmarks-01-overview/"},"Hashmaps Benchmarks (2019)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/dgryski/tsip"},"tsip")," - Go, amd64, C, and Rust implemtations of a small fast string hashing function."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/pdf/1504.06804.pdf"},"High Speed Hashing for Integers and Strings (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://danlark.org/2020/06/14/128-bit-division/"},"Optimizing 128-bit Division (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html"},"Looks Like It [Perceptual hash algorithms]")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=24915731"},"Ask HN: Is There a Known Recursive Hash? (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/tkaitchuck/aHash"},"aHash")," - Fastest, DOS resistant hash currently available in Rust."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/bee-san/HashSearch"},"HashSearch")," - Searches Hash APIs and Google to crack your hash quickly."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/benwr/bromberg_sl2"},"Rust library for homomorphic hashing")," (",(0,n.kt)("a",{parentName:"li",href:"https://lobste.rs/s/phm3v2/rust_library_for_homomorphic_hashing"},"Lobsters"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.srihash.org/"},"SRI Hash Generator")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://cmph.sourceforge.net/papers/esa09.pdf"},"Hash, displace, and compress")," (",(0,n.kt)("a",{parentName:"li",href:"https://gist.github.com/pervognsen/b21f6dd13f4bcb4ff2123f0d78fcfd17"},"Code"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://hashids.org/"},"Hashids")," - Generate short unique ids from integers. (",(0,n.kt)("a",{parentName:"li",href:"https://github.com/niieani/hashids.js"},"JS Code"),") (",(0,n.kt)("a",{parentName:"li",href:"https://github.com/speps/go-hashids"},"Go Code"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://ferd.ca/simhashing-hopefully-made-simple.html"},"Simhashing (hopefully) made simple (2012)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/Daninet/hash-wasm"},"hash-wasm")," - Lightning fast hash functions using hand-tuned WebAssembly binaries."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md"},"Comparing ahash to other hashing algorithms")," (",(0,n.kt)("a",{parentName:"li",href:"https://lobste.rs/s/jitsly/comparing_ahash_other_hashing"},"Lobsters"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://medium.com/@dgryski/consistent-hashing-algorithmic-tradeoffs-ef6b8e2fcae8"},"Consistent Hashing: Algorithmic Tradeoffs (2018)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://benhoyt.com/writings/hash-table-in-c/"},"How to implement a hash table (in C) (2021)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=26590234"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=k6xR2kf9hlA"},"Live-coding a linked hash map in Rust (2018)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://francoisbest.com/posts/2021/hashvatars"},"Representing SHA-256 Hashes As Avatars (2021)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=26861728"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://tylerneylon.com/a/lsh1/"},"Introduction to Locality-Sensitive Hashing (2018)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=27614381"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://blog.toit.io/hash-maps-that-dont-hate-you-1a96150b492a"},"An efficient way to make hash maps with insertion ordering (2021)")," (",(0,n.kt)("a",{parentName:"li",href:"https://lobste.rs/s/s9geyj/hash_maps_don_t_hate_you"},"Lobsters"),") (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=27698059"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/cmuratori/meow_hash"},"Meow Hash")," - Fast hash taking 128 bytes of seed and producing 128 bits of output. (",(0,n.kt)("a",{parentName:"li",href:"https://peter.website/meow-hash-cryptanalysis"},"Cryptanalysis of Meow Hash"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://rentafounder.com/the-problem-with-perceptual-hashes/"},"The Problem with Perceptual Hashes (2021)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=28091750"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://blog.bradfieldcs.com/an-introduction-to-hashing-in-the-era-of-machine-learning-6039394549b0"},"An Introduction to Hashing in the Era of Machine Learning (2018)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/AsuharietYgvar/AppleNeuralHash2ONNX"},"AppleNeuralHash2ONNX")," - Convert Apple NeuralHash model for CSAM Detection to ONNX. (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=28219068"},"HN"),") (",(0,n.kt)("a",{parentName:"li",href:"https://www.reddit.com/r/MachineLearning/comments/p6hsoh/p_appleneuralhash2onnx_reverseengineered_apple/"},"Reddit"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/kste/haraka"},"Haraka")," - Secure and efficient short-input hash function."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/near/borsh"},"borsh")," - Binary Object Representation Serializer for Hashing."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.72.2442&rep=rep1&type=pdf"},"Less Hashing, Same Performance: Building a Better Bloom Filter")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.andreinc.net/2021/10/02/implementing-hash-tables-in-c-part-1"},"Implementing Hash Tables in C (2021)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=28889442"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/aetilius/pHash"},"pHash")," - Open source perceptual hash library. (",(0,n.kt)("a",{parentName:"li",href:"https://www.phash.org/"},"Web"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.franzoni.eu/consistent-hashing-for-dummies/"},"Consistent Hashing for Dummies (2021)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://mollyrocket.com/meowhash"},"Meow Hash")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=29038813"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.poseidon-hash.info/"},"Poseidon Hash")," - ZK-friendly Hashing."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/filecoin-project/neptune"},"Neptune")," - Rust implementation of the Poseidon hash function tuned for Filecoin."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/pdf/2111.00602.pdf"},"On the Optimal Time/Space Tradeoff for Hash Tables (2021)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/corkami/collisions"},"Hash collisions and their exploitations")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://itnext.io/introducing-consistent-hashing-9a289769052e"},"Introducing Consistent Hashing (2020)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://taxicat1.github.io/hash6432shift_inversion.html"},"Reversing an integer hash function")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/2111.06628"},"Learning to Break Deep Perceptual Hashing: The Use Case NeuralHash (2022)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/multiformats/multihash"},"multihash")," - Protocol for differentiating outputs from various well-established cryptographic hash functions, addressing size + encoding considerations."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://sha256algorithm.com/"},"SHA-256 explained step-by-step visually")," (",(0,n.kt)("a",{parentName:"li",href:"https://github.com/dmarman/sha256algorithm"},"Code"),") (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=30244534"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/JohannesBuchner/imagehash"},"ImageHash")," - Python Perceptual Image Hashing Module. Image hashes tell whether two images look nearly identical."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/backtrace-labs/umash"},"UMASH")," - Fast almost universal 64-bit string hash."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/simonhf/sharedhashfile"},"SharedHashFile: Share Hash Tables With Stable Key Hints Stored In Memory Mapped Files Between Arbitrary Processes")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/skeeto/hash-prospector"},"Hash Function Prospector")," - Automated integer hash function discovery.")))}u.isMDXComponent=!0}}]);