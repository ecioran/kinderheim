"use strict";(self.webpackChunkkinderheim=self.webpackChunkkinderheim||[]).push([[4926],{3905:function(t,e,a){a.d(e,{Zo:function(){return p},kt:function(){return c}});var r=a(7294);function i(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function n(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?n(Object(a),!0).forEach((function(e){i(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,r,i=function(t,e){if(null==t)return{};var a,r,i={},n=Object.keys(t);for(r=0;r<n.length;r++)a=n[r],e.indexOf(a)>=0||(i[a]=t[a]);return i}(t,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(r=0;r<n.length;r++)a=n[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(i[a]=t[a])}return i}var s=r.createContext({}),m=function(t){var e=r.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},p=function(t){var e=m(t.components);return r.createElement(s.Provider,{value:e},t.children)},h={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var a=t.components,i=t.mdxType,n=t.originalType,s=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),u=m(a),c=i,f=u["".concat(s,".").concat(c)]||u[c]||h[c]||n;return a?r.createElement(f,o(o({ref:e},p),{},{components:a})):r.createElement(f,o({ref:e},p))}));function c(t,e){var a=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var n=a.length,o=new Array(n);o[0]=u;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:i,o[1]=l;for(var m=2;m<n;m++)o[m]=a[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9118:function(t,e,a){a.r(e),a.d(e,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return h}});var r=a(7462),i=a(3366),n=(a(7294),a(3905)),o=["components"],l={title:"Satisfiability modulo theories"},s="[Satisfiability modulo theories](https://en.wikipedia.org/wiki/Satisfiability_modulo_theories)",m={unversionedId:"math/logic/satisfiability-modulo-theories",id:"math/logic/satisfiability-modulo-theories",title:"Satisfiability modulo theories",description:"Links",source:"@site/docs/math/logic/satisfiability-modulo-theories.md",sourceDirName:"math/logic",slug:"/math/logic/satisfiability-modulo-theories",permalink:"/kinderheim/math/logic/satisfiability-modulo-theories",draft:!1,editUrl:"https://github.com/ecioran/kinderheim/docs/math/logic/satisfiability-modulo-theories.md",tags:[],version:"current",frontMatter:{title:"Satisfiability modulo theories"},sidebar:"tutorialSidebar",previous:{title:"Lean",permalink:"/kinderheim/math/logic/automated-theorem-proving/lean"},next:{title:"Mathematical optimization",permalink:"/kinderheim/math/mathematical-optimization/"}},p={},h=[{value:"Links",id:"links",level:2}],u={toc:h};function c(t){var e=t.components,a=(0,i.Z)(t,o);return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"satisfiability-modulo-theories"},(0,n.kt)("a",{parentName:"h1",href:"https://en.wikipedia.org/wiki/Satisfiability_modulo_theories"},"Satisfiability modulo theories")),(0,n.kt)("h2",{id:"links"},"Links"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/CVC4/CVC4"},"CVC4")," - Efficient open-source automatic theorem prover for satisfiability modulo theories (SMT) problems."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/Z3Prover/z3/"},"Z3")," - Theorem prover from Microsoft Research. (",(0,n.kt)("a",{parentName:"li",href:"http://theory.stanford.edu/~nikolaj/programmingz3.html"},"Programming Z3"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://typon.github.io/wordle.html"},"Solving Wordle with Z3")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=29886990"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://rise4fun.com/Z3/tutorial/guide"},"Getting Started with Z3")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/cpitclaudel/z3.wasm"},"z3.wasm")," - WASM builds of the Z3 SMT solver."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://codingnest.com/modern-sat-solvers-fast-neat-and-underused-part-3-of-n/"},"Modern SAT solvers: fast, neat and underused (part 3 of N)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=19953213"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/1905.09423"},"Set Constraints, Pattern Match Analysis, and SMT (2019)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://codingnest.com/modern-sat-solvers-fast-neat-and-underused-part-1-5-of-n/"},"Modern SAT solvers: fast, neat and underused (part 1.5 of N) (2019)")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=21095766"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/locuslab/SATNet"},"SATNet")," - Bridging deep learning and logical reasoning using a differentiable satisfiability solver."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/c-cube/mc2"},"MC2")," - Modular SMT solver in OCaml, based on the MCSat calculus."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/pdf/1909.01743.pdf"},"Verifying the DPLL Algorithm in Dafny")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/pdf/1909.07659.pdf"},"Simple Fixpoint Iteration To Solve Parity Games")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/jix/varisat"},"SAT solver written in Rust")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/dselsam/neurosat"},"NeuroSAT")," - Learning a SAT Solver from Single-Bit Supervision."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/msoos/cryptominisat"},"CryptoMiniSat SAT solver")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://yurichev.com/news/20200621_regex_SAT/"},"SAT solver on top of regex matcher")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://yurichev.com/SAT_SMT.html"},"SAT/SMT by Example")," - Extensive and diverse collection of problems that can be encoded as SAT or SMT problems, and discusses their encodings in detail."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://fmv.jku.at/kissat/"},"Kissat SAT Solver")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=23979388"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.quantamagazine.org/can-computers-solve-the-collatz-conjecture-20200826/"},"Can Computers Solve the Collatz Conjecture? (2020)")," (",(0,n.kt)("a",{parentName:"li",href:"https://lobste.rs/s/ylgnlq/computer_scientists_attempt_corner"},"Lobsters"),") (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=24288963"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://shapr.github.io/posts/2019-07-10-smt-solvers.html"},"SMT Solvers, Integer Linear Programming (2019)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/LeventErkok/sbv"},"SBV")," - SMT Based Verification in Haskell. (",(0,n.kt)("a",{parentName:"li",href:"https://github.com/LeventErkok/sbv/blob/master/CHANGES.md"},"Changes"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/2008.02215"},"A Time Leap Challenge for Sat Solving (2020)")," (",(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/2008.02215"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://testsmt.github.io/"},"Yin-Yang")," - Tool for stress-testing SMT solvers. (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=25123138"},"HN"),") (",(0,n.kt)("a",{parentName:"li",href:"https://github.com/testsmt/yinyang"},"Code"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/JiaxuanYou/G2SAT"},"G2SAT: Learning to Generate SAT Formulas")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/pysathq/pysat"},"PySAT")," - Toolkit for SAT-based prototyping in Python. (",(0,n.kt)("a",{parentName:"li",href:"https://pysathq.github.io/"},"Docs"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/biotomas/ipasir"},"ipasir.h")," - Standard Interface for Incremental Satisfiability Solving."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/marijnheule/microsat"},"microsat")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/cespare/saturday"},"Saturday")," - Small SAT solver in Go."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/kind2-mc/kind2"},"Kind 2")," - Multi-engine, parallel, SMT-based automatic model checker for safety properties of Lustre programs. (",(0,n.kt)("a",{parentName:"li",href:"https://kind2-mc.github.io/kind2/"},"Web"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://sat-smt.codes/SAT_SMT_by_example.pdf"},"Sat/SMT by Example (2021)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://bellmar.medium.com/programming-in-z3-by-learning-to-think-like-a-compiler-401fd46828d5"},"Programming in Z3 by learning to think like a compiler")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=27025289"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://colab.research.google.com/github/philzook58/z3_tutorial/blob/master/Z3%20Tutorial.ipynb"},"Z3 Tutorial")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://twitter.com/andrew_n_carr/status/1390723195607552000"},"Fun examples of Z3 (2021)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://barghouthi.github.io/2019/07/15/smt-probability/"},"Teaching Your SMT Solver Probability Theory (2019)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/dreal/dreal4"},"dReal")," - SMT Solver for Nonlinear Theories of Reals. (",(0,n.kt)("a",{parentName:"li",href:"https://dreal.github.io/"},"Web"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://twitter.com/danluu/status/1417215848633159689"},"Proof P = NP was accidentally published in TOCT")," (",(0,n.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=27886900"},"HN"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/sisl/PicoSAT.jl"},"PicoSAT.jl")," - Julia bindings to the SAT solver picosat."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://wintered.github.io/papers/park-etal-oopsla21.pdf"},"Generative Type-Aware Mutation for Testing SMT Solvers (2021)")," (",(0,n.kt)("a",{parentName:"li",href:"https://twitter.com/DominikWinterer/status/1449003168168357888"},"Tweet"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/OCamlPro/mikino_bin"},"Mikino")," - Simple induction and BMC engine."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/kino-mc/rsmt2"},"rsmt2")," - Generic library to interact with SMT-LIB 2 compliant solvers running in a separate system process, such as Z3 and CVC4."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/c-cube/smbc"},"SMBC")," - Experimental model finder/SMT solver for functional programming."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://homepages.dcc.ufmg.br/~hbarbosa/papers/tacas2022.pdf"},"Cvc5: Versatile and Industrial-Strength SMT Solver (2022)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/sosy-lab/java-smt"},"JavaSMT")," - Unified Java API for SMT solvers."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/SRI-CSL/yices2"},"Yices 2")," - Solver for Satisfiability Modulo Theories (SMT) problems. (",(0,n.kt)("a",{parentName:"li",href:"https://yices.csl.sri.com/"},"Web"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/R-O-C-K-E-T/Factorio-SAT"},"Factorio SAT")," - Enhancing the Factorio experience with SAT solvers."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/muhos/ParaFROST"},"ParaFROST")," - Parallel SAT Solver with GPU Accelerated Inprocessing."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/danielschemmel/drsat"},"DRSAT")," - Daniel's Rusty SAT solver."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/jdrprod/SATurne"},"SATurne")," - Purely functional verified SAT solver which produces proofs."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/ufmg-smite/lean-smt"},"SMT Lean")," - Tactics for discharging Lean goals into SMT solvers.")))}c.isMDXComponent=!0}}]);