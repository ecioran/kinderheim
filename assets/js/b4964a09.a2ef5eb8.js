"use strict";(self.webpackChunkkinderheim=self.webpackChunkkinderheim||[]).push([[9452],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return u}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),h=m(a),u=r,c=h["".concat(o,".").concat(u)]||h[u]||d[u]||i;return a?n.createElement(c,p(p({ref:t},s),{},{components:a})):n.createElement(c,p({ref:t},s))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,p=new Array(i);p[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,p[1]=l;for(var m=2;m<i;m++)p[m]=a[m];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},77420:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return d}});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),p=["components"],l={title:"Dependent types"},o="[Dependent types](https://wiki.haskell.org/Dependent_type)",m={unversionedId:"math/type-theory/dependent-types",id:"math/type-theory/dependent-types",title:"Dependent types",description:"Magmide looks nice.",source:"@site/docs/math/type-theory/dependent-types.md",sourceDirName:"math/type-theory",slug:"/math/type-theory/dependent-types",permalink:"/kinderheim/math/type-theory/dependent-types",draft:!1,editUrl:"https://github.com/ecioran/kinderheim/docs/math/type-theory/dependent-types.md",tags:[],version:"current",frontMatter:{title:"Dependent types"},sidebar:"tutorialSidebar",previous:{title:"Cubical type theory",permalink:"/kinderheim/math/type-theory/cubical-type-theory"},next:{title:"Wolfram Alpha",permalink:"/kinderheim/math/wolfram-alpha"}},s={},d=[{value:"Links",id:"links",level:2}],h={toc:d};function u(e){var t=e.components,a=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dependent-types"},(0,i.kt)("a",{parentName:"h1",href:"https://wiki.haskell.org/Dependent_type"},"Dependent types")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/magmide/magmide"},"Magmide")," looks nice."),(0,i.kt)("h2",{id:"links"},"Links"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=W5-ulP_JzNc"},"Cubical Adventures")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/paulcadman/the-little-typer"},'Resources for "The Little Typer" study group')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.williamjbowman.com/resources/wjb-defense.pdf"},"Compiling with Dependent Types")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=q58NFuUr0GU"},"Live Functional Programming with Typed Holes (2019)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/silt-lang/silt"},"Silt")," - An in-progress fast, dependently typed, functional programming language implemented in Swift."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/AndrasKovacs/elaboration-zoo"},"Minimal implementations for dependent type checking and elaboration")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/jrslepak/Remora"},"Remora")," - Dependently-typed language with Iverson-style implicit lifting."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/cryptiumlabs/juvix"},"Juvix")," - More elegant language for a more civilized age. (",(0,i.kt)("a",{parentName:"li",href:"https://www.reddit.com/r/haskell/comments/czierr/juvix_dependentlinearlytyped_core_language_with/"},"Reddit"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ollef/sixty"},"sixty")," - Dependent type checker using normalisation by evaluation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/moonad/Formality"},"Formality")," - Efficient dependently-typed systems programming language and proof assistant. (",(0,i.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=18230148"},"HN"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://adam.chlipala.net/cpdt/"},"Certified Programming with Dependent types")," (",(0,i.kt)("a",{parentName:"li",href:"http://adam.chlipala.net/cpdt/cpdt.pdf"},"PDF"),") (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/hargoniX/cpdt-lean"},"Code"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/owo-lang/voile-rs"},"voile-rs")," - Dependently-typed programming language with a non-dependent version of row-polymorphism, meta variable resolution and implicit parameter syntax."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=e4FeQCabuOQ"},"Approximate Normalization for Gradual Dependent Types (2019)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/dependently-typed-language/"},"A Dependently Typed Language (2019)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/sweirich/pi-forall"},"Pi-Forall language")," - Demo implementation of a simple dependently-typed language."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=ohG-PRwOorA"},"Dependent types, Vitaly Bragilevsky (2020)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/alhassy/next-700-module-systems"},"Next 700 Module Systems")," - Extending Dependently-Typed Languages to Implement Module System Features In The Core Language."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://arxiv.org/pdf/1908.02035.pdf"},"A Dependently Typed Multi-Stage Calculus (2019)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.williamjbowman.com/resources/wjb2019-depmacros.pdf"},"Dependent Type Systems as Macros (2019)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://golem.ph.utexas.edu/category/2020/05/in_further_praise_of_dependent.html"},"In Further Praise of Dependent Types (2020)")," (",(0,i.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=23139972"},"HN"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://davidchristiansen.dk/tutorials/nbe/"},"Checking Dependent Types with Normalization by Evaluation: A Tutorial")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://cs.ru.nl/F.Wiedijk/courses/tt-2010/tvftl/epigram-notes.pdf"},"Epigram: Practical Programming with Dependent Types (2004)")," (",(0,i.kt)("a",{parentName:"li",href:"https://lobste.rs/s/v0cfko/epigram_practical_programming_with"},"Lobsters"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.andres-loeh.de/LambdaPi/"},"A Tutorial Implementation of a Dependently Typed Lambda Calculus")," (",(0,i.kt)("a",{parentName:"li",href:"https://www.andres-loeh.de/LambdaPi/LambdaPi.pdf"},"PDF"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://math.andrej.com/2012/11/08/how-to-implement-dependent-type-theory-i/"},"How to implement dependent type theory (2012)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.cs.nott.ac.uk/~pszgmh/bib.html#well-typed"},"Dependently-typed compilers don't go wrong (2020)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.tomharding.me/2018/01/09/dependable-types/"},"Dependable Types explained in parts (2018)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/dpndnt/library"},"Research library of the ##dependent IRC channel")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.e-pig.org/"},"Epigram language")," - Dependently typed programming language and an interactive programming environment. (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/mietek/epigram2"},"Code"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://dl.acm.org/doi/10.1145/3408973"},"A dependently typed calculus with pattern matching and erasure inference (2020)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://math.andrej.com/2020/09/14/a-general-definition-of-dependent-type-theories/"},"A general definition of dependent type theories (2020)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/jonsterling/dreamtt"},"dreamtt")," - Pedagogic implementation of abstract bidirectional elaboration for dependent type theory."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/thautwarm/Metagen"},"Metagen")," - Dependently type-safe code generator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/JoeyEremondi/GDTL-artifact"},"Gradual Dependently Typed Language")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.poberezkin.com/posts/2020-09-04-dependent-types-to-code-are-what-static-types-to-data.html"},"Dependent types to code are what static types to data (2020)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/the-little-typer/pie"},"Pie language")," - Little Language with Dependent Types. Companion language for The Little Typer book."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://mathoverflow.net/questions/376839/what-makes-dependent-type-theory-more-suitable-than-set-theory-for-proof-assista"},"What makes dependent type theory more suitable than set theory for proof assistants?")," (",(0,i.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=25167468"},"HN"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.386.2624"},"Dependent types at work (2009)")," (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/conal/DependentTypesAtWork-exercises"},"Code"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/webyrd/curnelo"},"curnelo")," - Cur dependently-typed programming language, implemented in miniKanren."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/wilbowma/cur"},"cur")," - Language with static dependent-types and dynamic types, type annotations and parentheses, theorem proving and meta-programming."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://jozefg.github.io/"},"Daniel Gratzer Research")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://dspace.library.uu.nl/handle/1874/337692"},"Improving Error Messages for Dependent Types with Constraint-based Unification (2016)")," (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/JoeyEremondi/lambda-pi-constraint"},"Code"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/5HT/DependentLinearPi"},"Dependently Typed Linear \u03c0-Calculus in Agda")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://fredriknf.com/papers/dimensions2021.pdf"},"Type systems for programs respecting dimensions (2021)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.cs.nott.ac.uk/~pszgmh/well-typed.pdf"},"Calculating Dependently-Typed Compilers (2021)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.cs.cmu.edu/~rwh/papers/dtal/icfp01.pdf"},"A Dependently Typed Assembly Language")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://davidchristiansen.dk/tutorials/implementing-types-hs.pdf"},"Checking Dependent Types with Normalization by Evaluation: A Tutorial (Haskell Version) (2019)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/tolziplohu/durin"},"Durin")," - Dependent Unboxed higher-oRder Intermediate Notation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/tolziplohu/pika"},"Pika")," - Small, dependently typed ML with algebraic effects and unboxed types."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/eashanhatti/clamn"},"Clamn")," - Functional systems language leveraging dependent types, partial evaluation, and data layout abstraction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ziman/ttstar"},"TTstar")," - Dependently typed core calculus with erasure inference."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/AndrasKovacs/staged"},"staged")," - Experimental staged language with dependent types."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ejgallego/dfuzz"},"dfuzz")," - Linear Dependent Types for Differential Privacy."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/mmcqd/datatt"},"datatt")," - Implementation of a dependent type theory with user defined datatypes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/caotic123/PomPom-Language"},"Pompom")," - Dependently typed language for proofs that you can implement in one day. (",(0,i.kt)("a",{parentName:"li",href:"https://news.ycombinator.com/item?id=28725803"},"HN"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/sweirich/corespec"},"Specification for Dependent Types in Haskell (Core)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://lastland.github.io/media/papers/adverbs-preprint.pdf"},"(2) Program Adverbs: Structures for Embedding Effectful Programs (2021)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/namin/dot"},"Dependent Object Types (DOT)")," - Formalization of the Dependent Object Types (DOT) calculus."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/blainehansen/magma"},"Magma")," - Dependently-typed language. (",(0,i.kt)("a",{parentName:"li",href:"https://lobste.rs/s/upzwzj/magma_dependently_typed_language"},"Lobsters"),") (",(0,i.kt)("a",{parentName:"li",href:"https://blainehansen.me/post/my-path-to-magma/"},"My Path to Magma (2021)"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.cl.cam.ac.uk/~ds709/agda-soas/"},"Formal Metatheory of Second-Order Abstract Syntax")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/aya-prover/aya-dev"},"Aya")," - Programming language and a proof assistant designed for formalizing math and type-directed programming. (",(0,i.kt)("a",{parentName:"li",href:"https://www.aya-prover.org/"},"Web"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/atennapel/tinka-hs"},"tinka-hs")," - Dependently typed programming language written in Haskell."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/cedille/cedille"},"Cedille")," - Dependently typed programming languages based on the Calculus of Dependent Lambda Eliminations. (",(0,i.kt)("a",{parentName:"li",href:"https://cedille.github.io/"},"Web"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/bollu/minitt"},"Mini-TT")," - Curricula for learning how to implement dependently typed languages by recursive paper-chasing."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/heliaxdev/minijuvix"},"MiniJuvix")," - Dependently functional programming language for writing efficient formally-verified validity predicates, which can be deployed to various distributed ledgers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/moonad/FormCoreJS"},"FormCoreJS")," - Minimal pure functional language based on self dependent types."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://firsov.ee/finset/"},"Dependently typed programming with finite sets")," (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/agda-finset"},"Code"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/forked-from-1kasper/bravo"},"Castle Bravo: Experimental HoTT Implementation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/magmide/magmide"},"Magmide")," - Dependently-typed proof language intended to make provably correct bare metal code possible for working software engineers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/TOTBWF/teenytt"},"TeenyTT")," - Small, didactic proof assistant designed around dependent type theory.")))}u.isMDXComponent=!0}}]);